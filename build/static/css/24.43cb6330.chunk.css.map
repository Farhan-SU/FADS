{"version":3,"sources":["webpack://src/assets/styles/agency.scss","webpack://src/assets/styles/_breakpoints.scss"],"names":[],"mappings":"AAGA,aACI,wFACA,CAAA,WACA,CAAA,WACA,CAAA,eACA,CAAA,mBCwCF,CAAA,oCD7CF,aAOQ,0BACA,CAAA,oBAIR,CAAA,CAAA,SACI,WACA,CAAA,mBACA,CAAA,mBC8BF,CAAA,oCDjCF,SAMQ,WACA,CAAA,WACA,CAAA,iBACA,CAAA,kBAGL,CAAA,CAAA,kBACC,iBACA,CAAA,iBACA,CAAA,qBACA,CAAA,UCiBF,CAAA,oCDrBC,kBAOK,WACA,CAAA,QACA,CAAA,UACA,CAAA,mBACA,CAAA,kBAGJ,CAAA,CAAA,qBACI,QACA,CAAA,aACA,CAAA,gBACA,CAAA,eACA,CAAA,wBACA,CAAA,mBCCN,CAAA,oCDPE,qBASQ,gBACA,CAAA,kBACA,CAAA,gBAKZ,CAAA,CAAA,QACI,WACA,CAAA,iBACA,CAAA,UACA,CAAA,iBACA,CAAA,8BAAA,CAAA,sBACA,CAAA,0BAAA,CAAA,kBACA,CAAA,kCAAA,CAAA,0BACA,CAAA,eACA,CAAA,WClBF,CAAA,oCDSF,QAYK,WACA,CAAA,iBACA,CAAA,iBACA,CAAA,eAGD,CAAA,CAAA,aACI,YACA,CAAA,WACA,CAAA,oBACA,CAAA,iBACA,CAAA,wBACA,CAAA,iBACA,CAAA,yBAAA,CAAA,iBClCN,CAAA,oCD2BE,aAUQ,uBACA,CAAA,YACA,CAAA,WACA,CAAA,cACA,CAAA,kDCzCV,CAAA,CAAA,oCD2CM,eAEQ,iBACA,CAAA,WAGR,CAAA,CAAA,mBACI,wBACA,CAAA,8BAGJ,CAAA,gBACI,aACA,CAAA,gBACA,CAAA,eACA,CAAA,iBACA,CAAA,QAKJ,CAAA,qBACI,iBACA,CAAA,UAAA","file":"24.43cb6330.chunk.css","sourcesContent":["@import 'colors'; \n@import 'breakpoints'; \n\n.agency-home{\n    background: lighten($lightergraypurple, 8%) url('../images/agencyBgT2.gif') no-repeat left -570px/ 160%;\n    height: 100%;\n    width: 100vw;\n    overflow: hidden;\n    padding-bottom: 5rem;\n    @include media (\"screen\", \"<=phone\") {\n        background-position: bottom center;\n        background-size: 300%;\n    }\n}\n\n.intro-a{\n    height: 100%;\n    padding-top: 12.4rem;\n    padding-bottom: 6rem;\n  \n    @include media (\"screen\", \"<=phone\") {\n        width: 100vw;\n        height: 100%;\n        margin-top: 8.5rem;\n        margin-bottom: 3rem;\n    }\n\n   .experts{\n    padding-left: 5rem;\n    position: relative;\n    word-break: break-word;\n    width: 100%;\n\n    @include media (\"screen\", \"<=phone\") {\n        width: 100vw;\n        top: 2rem;\n        left: 0.2rem;\n        padding-left: 1.7rem;\n        margin-bottom: 2rem;\n    }\n\n    h1{\n        margin: 0;\n        color: darken($darkpurple, 9%);\n        font-size: 10.5vw;\n        overflow: hidden;\n        text-transform: uppercase;\n        letter-spacing: 10px;\n  \n        @include media (\"screen\", \"<=phone\") {\n            font-size: 10.8vw;\n            letter-spacing: 2px;\n            line-height: 3rem;\n        }\n    }\n   }\n}\n.agency{\n    height: 100%;\n    position: relative;\n    width: 99vw;\n    padding: auto 2rem;\n    justify-content: center;\n    align-items: center;\n    align-content: space-around;\n    overflow: hidden;\n    cursor: none;\n\n    @include media (\"screen\", \"<=phone\") {\n     width: 100vw;\n     padding: auto 1rem;\n     margin-left: 0.2rem;\n     margin-top: 6rem;\n    }\n\n    .box{\n        height: 200px;\n        width: 305px;\n        margin: 1.5rem 2.3rem;\n        text-align: center;\n        background-color: darken($graypurple, 20%);\n        border-radius: 5px;\n        align-self: center;\n\n        @include media (\"screen\", \"<=phone\") {\n            margin: 1rem 2.3rem 2rem 2.3rem;\n            height: 200px;\n            width: 320px;\n            padding: 0 1rem;\n            background-color: #61526dda;\n        }\n        a{  \n            @include media (\"screen\", \"<=phone\") {\n                position: relative;\n                z-index: 300;\n            } \n        }\n        &:hover{\n            background-color: darken($darkpurple, $amount: 10%);\n            transition: all 500ms ease-in-out;\n        }\n       \n        h3{\n            color: $heading;\n            font-size: 1.5rem;\n            font-weight: 400;\n            position: relative;\n            top: 5rem;\n            @include media (\"screen\", \"<=phone\") {\n                \n            }\n        }\n        .bigTxt{\n            position: relative;\n            top: 4.5rem; \n        }\n    }\n   \n}\n","//Simple, elegant and maintainable media queries in Sass\n//http://include-media.com\n//Author: Eduardo Boucas <mail@eduardoboucas.com>\n//A lot of content has been omiited and refractored to fit my needs\n//You can view the original file at the link above \n\n$breakpoints: (\n  'phone': 430px, \n  'tablet': 768px, \n  'desktop': 1024px\n) !default;\n\n$media-expressions: (\n  'screen': 'screen', \n  'print': 'print', \n  'handheld': 'handheld',\n  'retina2x': (\n    '(-webkit-min-device-pixel-ratio: 2)', \n    '(min-resolution: 192dpi)'\n  ), \n  'retina3x': (\n    '(-webkit-min-device-pixel-ratio: 3)', \n    '(min-resolution: 350dpi)'\n  )\n) !default;\n\n$unit-intervals: (\n  'px': 1, \n  'em': 0.01, \n  'rem': 0.1\n) !default;\n\n@mixin media($conditions...) {\n  @for $i from 1 through length($conditions) {\n    $conditions: set-nth($conditions, $i, parse-expression(nth($conditions, $i)));\n  }\n\n  $branches: get-query-branches($conditions);\n  $query: '';\n\n  @each $branch in $branches {\n    @if (str-length($query) != 0) {\n      $query: $query + ', ';\n    }\n\n    $query: $query + $branch;\n  }\n\n  @media #{$query} {\n    @content;\n  }\n}\n\n@function get-query-branches($expressions) {\n  $result: '';\n  $has-groups: false;\n\n  // Getting initial snapshot and looking for groups\n  @each $expression in $expressions {\n    @if (str-length($result) != 0) {\n      $result: $result + ' and ';\n    }\n\n    @if (type-of($expression) == 'string') {\n      $result: $result + $expression;\n    } @else if (type-of($expression) == 'list') {\n      $result: $result + nth($expression, 1);\n      $has-groups: true;\n    } @else {\n      @warn '#{$expression} is not a valid expression.';\n    }\n  }\n\n  // If we have groups, we have to create all possible combinations\n  @if $has-groups {\n    @each $expression in $expressions {\n      @if (type-of($expression) == 'list') {\n        $first: nth($expression, 1);\n\n        @each $member in $expression {\n          @if ($member != $first) {\n            @each $partial in $result {\n              $result: join($result, str-replace-first($first, $member, $partial));\n            }\n          }\n        }\n      }\n    }\n  }\n\n  @return $result;\n}\n\n@function parse-expression($expression) {\n  $operator: '';\n  $value: '';\n  $element: '';\n  $result: '';\n  $is-width: true;\n\n  @if (type-of($expression) != 'string') {\n    @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\n  }\n\n  // Separating the operator from the rest of the expression\n  @if (str-slice($expression, 2, 2) == '=') {\n    $operator: str-slice($expression, 1, 2);\n    $value: str-slice($expression, 3);\n  } @else {\n    $operator: str-slice($expression, 1, 1);\n    $value: str-slice($expression, 2);\n  }\n\n  // Checking what type of expression we're dealing with\n  @if map-has-key($breakpoints, $value) {\n    $result: map-get($breakpoints, $value);\n  } @else if map-has-key($media-expressions, $expression) {\n    $result: map-get($media-expressions, $expression);\n    $is-width: false;\n  } @else {\n    $result: to-number($value);\n  }\n\n  @if ($is-width) {\n    $unit: unit($result);\n    $interval: 0;\n    \n    @if (map-has-key($unit-intervals, $unit)) {\n      $interval: map-get($unit-intervals, $unit);\n    } @else {\n      @warn 'Unknown unit: #{$unit}';\n    } \n       \n    @if ($operator == '>') {\n      $element: '(min-width: #{$result + $interval})';\n    } @else if ($operator == '<') {\n      $element: '(max-width: #{$result - $interval})';\n    } @else if ($operator == '>=') {\n      $element: '(min-width: #{$result})';\n    } @else if ($operator == '<=') {\n      $element: '(max-width: #{$result})';\n    } @else {\n      @warn '#{$expression} is missing an operator.';\n    }\n  } @else {\n    $element: $result;\n  }\n\n  @return $element;\n}\n\n@function str-replace-first($search, $replace, $subject) {\n  $search-start: str-index($subject, $search);\n\n  @if $search-start == null {\n    @return $subject;\n  }\n\n  $result: str-slice($subject, 0, $search-start - 1);\n  $result: $result + $replace;\n  $result: $result + str-slice($subject, $search-start + str-length($search));\n\n  @return $result;\n}\n\n@function to-number($string) {\n  // Matrices\n  $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';\n  $numbers:  0   1   2   3   4   5   6   7   8   9;\n  \n  // Result\n  $result: 0;\n  $divider: 0;\n  $minus: false;\n\n  // Looping through all characters\n  @for $i from 1 through str-length($string) {\n    $character: str-slice($string, $i, $i);\n    $index: index($strings, $character);\n    \n  \n    @if $character == '-' {\n      $minus: true;\n    }\n    \n    @else if $character == '.' {\n      $divider: 1;\n    }\n    \n    @else {\n      @if type-of($index) != 'number' {\n        $result: if($minus, $result * -1, $result);\n        @return _length($result, str-slice($string, $i));\n      }\n\n      $number: nth($numbers, $index);\n      \n      @if $divider == 0 {\n        $result: $result * 10;\n      }\n      \n      @else {\n        // Move the decimal dot to the left\n        $divider: $divider * 10;\n        $number: $number / $divider;\n      }\n      \n      $result: $result + $number;\n    }\n  }\n  \n  @return if($minus, $result * -1, $result);\n}\n\n@function _length($number, $unit) {\n  $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';\n  $units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;\n  $index: index($strings, $unit);\n  \n  @if type-of($index) != 'number' {\n    @warn 'Unknown unit `#{$unit}`.';\n    @return false;\n  }\n  \n  @return $number * nth($units, $index);\n}\n"]}