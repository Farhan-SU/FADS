{"version":3,"sources":["webpack://src/assets/styles/pgagency.scss","webpack://src/assets/styles/_breakpoints.scss","webpack://src/assets/styles/_colors.scss"],"names":[],"mappings":"AAGA,WACI,iFACA,CAAA,8BACA,CAAA,oBAAA,CAAA,YACA,CAAA,8BAAA,CAAA,sBACA,CAAA,0BAAA,CAAA,kBACA,CAAA,4BAAA,CAAA,oBACA,CAAA,YAEC,CAAA,cACG,cACA,CAAA,iBACA,CAAA,SACA,CAAA,aACA,CAAA,eACA,CAAA,uBAIR,CAAA,eACI,WACA,CAAA,eACA,CAAA,iBACA,CAAA,WACA,CAAA,gBACA,CAAA,mBACA,CAAA,kBCmBF,CAAA,oCD1BF,eAWQ,gFAEJ,CAAA,CAAA,iBACI,iBACA,CAAA,UAEJ,CAAA,kBACI,eACA,CAAA,oBAAA,CAAA,YACA,CAAA,8BAAA,CAAA,sBACA,CAAA,0BAAA,CAAA,kBACA,CAAA,4BAAA,CAAA,oBACA,CAAA,aCGN,CAAA,oCDTE,kBASQ,gBAKR,CAAA,CAAA,wBACI,oBAAA,CAAA,YACA,CAAA,qCAAA,CAAA,6BACA,CAAA,0BAAA,CAAA,kBACA,CAAA,4BAAA,CAAA,oBACA,CAAA,mBACA,CAAA,iBACA,CAAA,sBAAA,CAAA,cAEA,CAAA,0BACI,WCfV,CAAA,oCDKE,wBAcQ,aAGJ,CAAA,CAAA,sCACI,oBAAA,CAAA,YACA,CAAA,6BAAA,CAAA,qBACA,CAAA,SACA,CAAA,YACA,CAAA,cACA,CAAA,aC5BV,CAAA,oCDsBM,sCASQ,UACA,CAAA,eACA,CAAA,kBAEJ,CAAA,CAAA,0CACI,4CAAA,CAAA,oCACA,CAAA,UACA,CAAA,iBACA,CAAA,aACA,CAAA,cACA,CAAA,UACA,CAAA,kBACA,CAAA,8BAKR,CAAA,2BACI,oBACA,CAAA,aAEJ,CAAA,2BACI,kBACA,CAAA,gBACA,CAAA,aElGC","file":"30.6cb67daa.chunk.css","sourcesContent":["@import 'colors'; \n@import 'breakpoints'; \n\n.error-bio{\n    background: #dfdcee url('../images/loading3.gif') no-repeat center center / contain;\n    background-blend-mode: multiply;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    align-content: center;\n    height: 100vh;\n\n     h1{\n        font-size: 4rem;\n        text-align: center;\n        width: 80%;\n        color: #666e9c;\n        margin-top: 4rem;\n        mix-blend-mode: multiply;\n     }\n  }\n \n.eboardwrapper{\n    width: 100vw;\n    overflow: hidden;\n    position: relative;\n    height: 100%;\n    padding-top: 6rem;\n    padding-bottom: 8rem;\n    background: lighten($lightergraypurple, 8%);\n    /*background: $graypurple url('../images/eboardbgl.svg') no-repeat right center/ cover;*/\n \n    @include media (\"screen\", \"<=phone\") {\n        background: $graypurple url('../images/eboardbgsm1.svg') no-repeat left center/ cover;\n    }\n    a{\n        position: relative;\n        z-index: 30;\n    }\n    h1{\n        font-size: 10rem;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        align-content: center;\n        color: darken($darkpurple, 2%);\n\n        @include media (\"screen\", \"<=phone\") {\n            font-size: 4.2rem;\n    \n        }\n    }\n\n    .members{\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        align-content: center;\n        margin: -3rem 2rem 0 2rem;\n        text-align: center;\n        flex-wrap: wrap;\n        \n        a{\n            cursor: none;\n        }\n\n        @include media (\"screen\", \"<=phone\") {\n            margin: 2rem 0;\n        }\n       \n        .member-intro{\n            display: flex;\n            flex-direction: column;\n            width: 33%;\n            height: 600px;\n            padding: 1.2rem;\n            margin: 2rem 0;\n\n            @include media (\"screen\", \"<=phone\") {\n                width: 100%;\n                transition: none;\n                margin: 2rem 0 1rem 0;\n            }\n            img{\n                filter: contrast(110%) saturate(1.15);\n                width: 100%;\n                border-radius: 5px;\n                max-width: 80%;\n                max-height: 80%;\n                opacity: 0.8;\n                margin: 0 auto 2rem auto;\n                transition: all 400ms ease-in-out;\n  \n            }\n        }\n        \n        h2{\n            letter-spacing: 0.2rem;\n            color: $purple;        \n        }\n        h4{\n            line-height: 2.3rem;\n            margin-top: 0.5rem;\n            color: $darkpurple;\n        }\n    }\n}","//Simple, elegant and maintainable media queries in Sass\n//http://include-media.com\n//Author: Eduardo Boucas <mail@eduardoboucas.com>\n//A lot of content has been omiited and refractored to fit my needs\n//You can view the original file at the link above \n\n$breakpoints: (\n  'phone': 430px, \n  'tablet': 768px, \n  'desktop': 1024px\n) !default;\n\n$media-expressions: (\n  'screen': 'screen', \n  'print': 'print', \n  'handheld': 'handheld',\n  'retina2x': (\n    '(-webkit-min-device-pixel-ratio: 2)', \n    '(min-resolution: 192dpi)'\n  ), \n  'retina3x': (\n    '(-webkit-min-device-pixel-ratio: 3)', \n    '(min-resolution: 350dpi)'\n  )\n) !default;\n\n$unit-intervals: (\n  'px': 1, \n  'em': 0.01, \n  'rem': 0.1\n) !default;\n\n@mixin media($conditions...) {\n  @for $i from 1 through length($conditions) {\n    $conditions: set-nth($conditions, $i, parse-expression(nth($conditions, $i)));\n  }\n\n  $branches: get-query-branches($conditions);\n  $query: '';\n\n  @each $branch in $branches {\n    @if (str-length($query) != 0) {\n      $query: $query + ', ';\n    }\n\n    $query: $query + $branch;\n  }\n\n  @media #{$query} {\n    @content;\n  }\n}\n\n@function get-query-branches($expressions) {\n  $result: '';\n  $has-groups: false;\n\n  // Getting initial snapshot and looking for groups\n  @each $expression in $expressions {\n    @if (str-length($result) != 0) {\n      $result: $result + ' and ';\n    }\n\n    @if (type-of($expression) == 'string') {\n      $result: $result + $expression;\n    } @else if (type-of($expression) == 'list') {\n      $result: $result + nth($expression, 1);\n      $has-groups: true;\n    } @else {\n      @warn '#{$expression} is not a valid expression.';\n    }\n  }\n\n  // If we have groups, we have to create all possible combinations\n  @if $has-groups {\n    @each $expression in $expressions {\n      @if (type-of($expression) == 'list') {\n        $first: nth($expression, 1);\n\n        @each $member in $expression {\n          @if ($member != $first) {\n            @each $partial in $result {\n              $result: join($result, str-replace-first($first, $member, $partial));\n            }\n          }\n        }\n      }\n    }\n  }\n\n  @return $result;\n}\n\n@function parse-expression($expression) {\n  $operator: '';\n  $value: '';\n  $element: '';\n  $result: '';\n  $is-width: true;\n\n  @if (type-of($expression) != 'string') {\n    @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\n  }\n\n  // Separating the operator from the rest of the expression\n  @if (str-slice($expression, 2, 2) == '=') {\n    $operator: str-slice($expression, 1, 2);\n    $value: str-slice($expression, 3);\n  } @else {\n    $operator: str-slice($expression, 1, 1);\n    $value: str-slice($expression, 2);\n  }\n\n  // Checking what type of expression we're dealing with\n  @if map-has-key($breakpoints, $value) {\n    $result: map-get($breakpoints, $value);\n  } @else if map-has-key($media-expressions, $expression) {\n    $result: map-get($media-expressions, $expression);\n    $is-width: false;\n  } @else {\n    $result: to-number($value);\n  }\n\n  @if ($is-width) {\n    $unit: unit($result);\n    $interval: 0;\n    \n    @if (map-has-key($unit-intervals, $unit)) {\n      $interval: map-get($unit-intervals, $unit);\n    } @else {\n      @warn 'Unknown unit: #{$unit}';\n    } \n       \n    @if ($operator == '>') {\n      $element: '(min-width: #{$result + $interval})';\n    } @else if ($operator == '<') {\n      $element: '(max-width: #{$result - $interval})';\n    } @else if ($operator == '>=') {\n      $element: '(min-width: #{$result})';\n    } @else if ($operator == '<=') {\n      $element: '(max-width: #{$result})';\n    } @else {\n      @warn '#{$expression} is missing an operator.';\n    }\n  } @else {\n    $element: $result;\n  }\n\n  @return $element;\n}\n\n@function str-replace-first($search, $replace, $subject) {\n  $search-start: str-index($subject, $search);\n\n  @if $search-start == null {\n    @return $subject;\n  }\n\n  $result: str-slice($subject, 0, $search-start - 1);\n  $result: $result + $replace;\n  $result: $result + str-slice($subject, $search-start + str-length($search));\n\n  @return $result;\n}\n\n@function to-number($string) {\n  // Matrices\n  $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';\n  $numbers:  0   1   2   3   4   5   6   7   8   9;\n  \n  // Result\n  $result: 0;\n  $divider: 0;\n  $minus: false;\n\n  // Looping through all characters\n  @for $i from 1 through str-length($string) {\n    $character: str-slice($string, $i, $i);\n    $index: index($strings, $character);\n    \n  \n    @if $character == '-' {\n      $minus: true;\n    }\n    \n    @else if $character == '.' {\n      $divider: 1;\n    }\n    \n    @else {\n      @if type-of($index) != 'number' {\n        $result: if($minus, $result * -1, $result);\n        @return _length($result, str-slice($string, $i));\n      }\n\n      $number: nth($numbers, $index);\n      \n      @if $divider == 0 {\n        $result: $result * 10;\n      }\n      \n      @else {\n        // Move the decimal dot to the left\n        $divider: $divider * 10;\n        $number: $number / $divider;\n      }\n      \n      $result: $result + $number;\n    }\n  }\n  \n  @return if($minus, $result * -1, $result);\n}\n\n@function _length($number, $unit) {\n  $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';\n  $units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;\n  $index: index($strings, $unit);\n  \n  @if type-of($index) != 'number' {\n    @warn 'Unknown unit `#{$unit}`.';\n    @return false;\n  }\n  \n  @return $number * nth($units, $index);\n}\n","$lightergraypurple: #d9cedf;\n$muave: #a67db0;\n$purple: #2f0e47;\n$graypurple: #ac9fb2;\n$pinkish: #D6C7D7;\n$darkpurple: #61526d;\n$background: #f9f5ff;\n$text: #1a2632;\n$heading: #fdf3e4;\n$bluegray:  #6b728d;\n$f4color: #d65273;"]}